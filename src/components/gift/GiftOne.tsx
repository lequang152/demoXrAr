/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 scene.gltf --transform 
Files: scene.gltf [39.12KB] > C:\Users\Admin\Downloads\gift\scene-transformed.glb [91.56KB] (-134%)
Author: Mug (https://sketchfab.com/1Mug)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/gift-729c11632ae14db6975e4d58e8749b54
Title: Gift
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import { Group } from "three";
import { RefObject, useEffect, useRef, useState } from "react";
import useSound from "use-sound";
import { useFrame, useThree } from "@react-three/fiber";
import ExplosionEffect from "../effect/ExplosionEffect";
import { IProps } from "../../types/gift.props";
import { calculateFallSpeed, useGift } from "./common";
import PopUp from "../popup/popup";
const modelGiftOne = import.meta.env.BASE_URL + "assets/model/gift-one.glb";

export function GiftOne({ position, product, onClick }: IProps) {
  const {
    ref,
    onUserClickOnGift,
    giftVisible,
    nodes,
    materials,
    exploding,
    isSuccess,
    giftPosition,
  } = useGift({ position, product, onClick }, modelGiftOne);

  // useFrame(() => {
  //   // Cập nhật vị trí mô hình trong mỗi frame
  //   if (group.current) {
  //     // Tính toán khoảng cách từ mô hình đến vị trí đang đứng của camera

  //     // Tính toán kích thước mới dựa trên khoảng cách
  //      // Điều chỉnh theo nhu cầu

  //     // Thay đổi kích thước của mô hình
  //     group.current.scale.set(newSize, newSize, newSize);

  //     // Tính toán vị trí mới dựa trên khoảng cách
  //     const newPosition = new Vector3().copy(position);
  //     newPosition.y -= calculateFallSpeed(product?.probability); // Điều chỉnh tốc độ rơi

  //     // Thay đổi vị trí của mô hình
  //     group.current.position.copy(newPosition);

  //     group.current.rotation.y += 0.1;
  //   }
  // });

  return (
    <>
      {isSuccess && <PopUp setIsUserClicked={onClick} product={product} />}
      <group
        ref={ref}
        position={position}
        dispose={null}
        onClick={onUserClickOnGift}
        visible={giftVisible}
        scale={1.5}
      >
        <mesh
          geometry={nodes.Sphere008_Material013_0.geometry}
          material={materials["Material.013"]}
          position={[0.266, 2.761, 0.074]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.098}
          visible={giftVisible}
        />
        <mesh
          geometry={nodes.Cube_Material002_0.geometry}
          material={materials["Material.002"]}
          position={[0, 0.871, 0]}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <mesh
          geometry={nodes.Cube001_Material008_0.geometry}
          material={materials["Material.008"]}
          position={[0, 1.331, 0]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={1.127}
        />
        <mesh
          geometry={nodes.Cube003_Material009_0.geometry}
          material={materials["Material.009"]}
          position={[0, 1.158, 0]}
          rotation={[-Math.PI / 2, 0, Math.PI / 2]}
          scale={[0.897, 1.19, 1.382]}
        />
        <mesh
          geometry={nodes.Cube002_Material010_0.geometry}
          material={materials["Material.010"]}
          position={[0, 1.15, 0]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={[0.897, 1.19, 1.382]}
        />
        <instancedMesh
          args={[
            nodes.Sphere_Material023_0.geometry,
            materials["Material.023"],
            11,
          ]}
          instanceMatrix={nodes.Sphere_Material023_0.instanceMatrix}
        />
      </group>
      {exploding && <ExplosionEffect position={giftPosition} />}
    </>
  );
}

useGLTF.preload(modelGiftOne);
