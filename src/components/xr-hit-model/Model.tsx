// import { Vector3 } from "@react-three/fiber";
// import { RefObject, useRef } from "react";
// import { useGLTF, useAnimations } from "@react-three/drei";
// import { Group } from "three";

// interface ModelProps {
//   position: Vector3;
// }

// export default function Model({ position }: ModelProps) {
//   const group = useRef<Group>(null) as RefObject<Group>;

//   const { nodes, materials, animations } = useGLTF(
//     "src/model/model2.gltf"
//   ) as any;

//   const { actions } = useAnimations(animations, group);

//   return (
//     <group ref={group} position={position} dispose={null}>
//       <group name="Scene">
//         <group name="Armature_druide" scale={1.5}>
//           <skinnedMesh
//             name="druid"
//             geometry={nodes.druid.geometry}
//             material={materials.color_main}
//             skeleton={nodes.druid.skeleton}
//           />
//           <primitive object={nodes.root} />
//         </group>
//       </group>
//     </group>
//   );
// }

// // Preload the model
// const ModelPreload = () => {
//   useGLTF.preload("src/model/model2.gltf");
//   return null;
// };

// export { ModelPreload };

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from "@react-three/drei";
import { Vector3 } from "@react-three/fiber";

interface ModelProps {
  position: Vector3;
}

export function Model({ position }: ModelProps) {
  const { nodes, materials } = useGLTF("public/assets/model/dog.gltf") as any;

  return (
    <group position={position} dispose={null} scale={0.5}>
      <mesh
        castShadow
        receiveShadow
        geometry={(nodes.character_dog as any).geometry}
        material={materials["Beige.017"]}
        rotation={[Math.PI / 2, 0, 0]}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={(nodes.character_dogArmLeft as any).geometry}
          material={materials["Beige.017"]}
          position={[0.204, 0, -0.634]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={(nodes.character_dogArmRight as any).geometry}
          material={materials["Beige.017"]}
          position={[-0.204, 0, -0.634]}
        />
        <group position={[0, 0, -0.704]}>
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Cube1339 as any).geometry}
            material={materials["Beige.017"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Cube1339_1 as any).geometry}
            material={materials["Red.034"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={(nodes.Cube1339_2 as any).geometry}
            material={materials["Black.026"]}
          />
        </group>
      </mesh>
    </group>
  );
}

// Preload the model
const ModelPreload = () => {
  useGLTF.preload("public/assets/model/dog.gltf");
  return null;
};

export { ModelPreload };
